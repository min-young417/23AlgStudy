7562번: 나이트의 이동

1.
첫째 줄에는 테스트 케이스의 개수.
체스판의 한 변의 길이 l. 
나이트가 현재 있는 칸.
나이트가 이동하려고 하는 칸.
나이트는 몇 번 움직이면 이 칸으로 이동할 수 있을까?

2.
dx = {1, 2, 2, 1, -1, -2, -2, -1}
dy = {2, 1, -1, -2, -2, -1, 1, 2}
ex / dx[3]=2, dy[3]=-1 //나이트가 이동하는 위치로 접근
현재좌표 = 0, 1번 이동한 좌표 = 1, 2번으로 이동한 좌표 = 2
루프(8가지)하여 현재좌표에서 해당 좌표가 몇번만에 도착가능한지 검사
도착해야 하는 칸의 숫자를 출력

3.
LOOP(T):
    arr = new int[I][I]
    visited = new boolean[I][I]

    BFS()
    
    print(arr[x2][y2])

BFS:
    dx = {1, 2, 2, 1, -1, -2, -2, -1}
    dy = {2, 1, -1, -2, -2, -1, 1, 2}

    q.add(new int[]{x1, y1})

    LOOP:
        int[] now = q.poll();
        nx = now[0]
        ny = now[1]

        LOOP:   
            ox = nx + dx[i]
            oy = ny + dy[i]

            0 <= ox < I , 0 <= oy < I 이면,
                q.add(new int[]{ox, oy})
                arr[ox][oy] = arr[nx][ny] + 1;
                visited[ox][oy] = true;