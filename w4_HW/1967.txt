1967번: 트리의 지름

1.
트리에서 어떤 두 노드를 선택해서 양쪽으로 쫙 당길 때, 
가장 길게 늘어나는 경우의 경로의 길이를 트리의 지름.
트리가 주어지면, 트리의 지름을 구하라.

2.
  1  2  3   
1
2            <- 좀 비효율
3

(입력 예시 이용)
1 (2, 3) (3, 2)
2 (1, 3) (4, 5)
3 (1, 2) (5, 11) (6, 9)
4 (2, 5) (7, 1) (8, 7)
5 (3, 11) (9, 15) (10, 4)
6 (3, 9) (11, 6) (12, 10)
7 (4, 1) (8, 7)
8
9 (5, 15) (10, 4)
10 (5, 4)
11 (6, 6)
12 (6, 10)

다음 node로 이동하면서 방문하지 않은 node일 경우 weight를 더한다.
반복하면서 가장 큰 거리의 합을 구한다.

3.
// input 저장
node(num, weight)

ArrayList<node>[] adj
boolen[] isVisited

dist = 0; furthestNode = 0;

LOOP:
    adj[i] = new ArrayList<>()

LOOP:
    int p, c, w
    adj[p].add(new node(c, w))
    adj[c].add(new node(p, w))

// 지름 찾기 (output)
isVisited[furthestNode] = true
DFS(furthestNode, 0)

print(longestdist)

DFS(nodeNum, distSum):
    longestdist < distSum 이면,
        longestdist = distSum
        furthestNode = nodeNum
    
    LOOP(next node):
        isVisited[next.n] == false 이면,
            isVisited[next.n] = true
            DFS(next.n, distSum + next.w)